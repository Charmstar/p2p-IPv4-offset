
Start with the SD Card Copier to clone your existing pi OS or prepare SENDSYNS for exclusive use on
a separate SD: download 2021-10-30-raspios-bullseye-armhf.zip from raspberrypi.com for a new
install to a micro-SD. 

Raspberry Pi 4b OS preparation for SENDSYNS:

Boot to GUI and then Enable SSH in pi's Desktop for Preferences->RaspberryPiCongiguration->Interfaces 
this will require a reboot.

0. sudo apt install python2
1. sudo dpkg --configure -a
2. sudo apt install scapy 
3. sudo apt install libpcap-dev

Use another computer to scp SENDSYNS.cpio to rpi-4b:
4. scp SENDSYNS.cpio pi@w.x.y.z:/home/pi

At /home/pi:
5. cpio -idv < SENDSYNS.cpio
6. cd SENDSYNS/SENDER
7. gcc receive1.c -o receive1 -lpcap
Ignore any compiler warning, it is only a warning.
8. cd ../RECEIVER
9. gcc receiver.c -o receiver -lpcap

When ready to receive:
10. sudo ./receiver eth0

To encrypt a file:
gpg -e -u {email of sender's Private key} -r {email of recipient's Public key} somefile 
produces somefile.gpg.

If sender and receiver share the same gpg key pair known only to them, then that key pair's email
is used for both the user (-u) and the recipient (-r) for encrypting. Now both sides are able to
decrypt the same undamaged file. A round trip proves that receiver has received the intended payload. 

A couple of lost packets is the most common cause of file delivery decryption failures. A single lost
SYN or flipped bit will defeat receiver's decryption. These are infrequent but when they become
persistent, it is probably right to try to "dodge" a bad IP pair for a new IP pair.

Note that a plaintext file will very likely still be delivereable both-ways and at least be received 
and understood despite missing packets. When decryptyion fails receiver will either not send anything
back, or receiver may send a short plaintext file delivery ("309 packets received" or "wrong key")
back to the sender to indicate what went wrong and whether to resend or not. 

When ready to send somefile.gpg, sender hits Control-C to stop the receiver program:
12. cd ../SENDER
13. sudo python2 nsendit.py z.w.x.y somefile.gpg

(If you get "No module named scapy.all", manually install scapy to run inside python2.7):
sudo cp -r /usr/lib/python3/dist-packages/scapy* /usr/lib/python2.7/dist-packages

A solid blast of packets ends abruptly to signal to the sender to go back to receive mode: 
cd ../RECEIVER; ./receiver eth0 
to be ready for receiver's positive or negative acknowlegement. The receiver sees the end of 
incoming packets and validates whether the received file transfer decrypts or is otherwise useful:

14. gpg -d translatedbinaryout | hexdump to decrypt received encrypted files. 
If the received file (translatedbinaryout) does not decrypt then try:
14a. cat translatedbinaryout  
to determine whether a file transfer is instead intended to be plaintext.

Receiver sends back the encrypted file that has just been received (translatedbinaryout) for 
positive acknowlegement, but only when that file delivery decrypts:
15. cd ../SENDER
16. sudo python2 nsendit.py w.x.y.z ../RECEIVER/translatedbinaryout

The receiver gleans the destination IP for this file delivery from the source IP of received SYNs.
17. When done sending, cd ../RECEIVER and restart receiver program, sudo ./receiver eth0, so that it
is always available or powered down when not sending.
